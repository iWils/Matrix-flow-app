# Matrix Flow - Makefile
# Application Next.js avec PostgreSQL

SHELL := /bin/sh
COMPOSE := docker compose
COMPOSE_PROD := docker compose -f docker-compose.prod.yml
WEB_DIR := web
APP_URL := http://localhost:3000

# Couleurs pour les messages
GREEN := \033[0;32m
YELLOW := \033[0;33m
RED := \033[0;31m
NC := \033[0m # No Color

.PHONY: help build up down restart ps logs logs-web logs-db clean nuke dev prod install db-push db-seed db-reset db-studio test lint typecheck bash-web bash-db backup restore

# Aide par d√©faut
help:
	@echo "$(GREEN)Matrix Flow - Commandes disponibles$(NC)"
	@echo ""
	@echo "$(YELLOW)üöÄ D√©marrage rapide:$(NC)"
	@echo "  make install      - Installation compl√®te (d√©pendances + DB)"
	@echo "  make dev          - D√©marre en mode d√©veloppement"
	@echo "  make prod         - D√©marre en mode production"
	@echo ""
	@echo "$(YELLOW)üê≥ Docker:$(NC)"
	@echo "  make build        - Reconstruit les images Docker"
	@echo "  make up           - D√©marre les services"
	@echo "  make down         - Arr√™te les services"
	@echo "  make restart      - Red√©marre les services"
	@echo "  make ps           - Affiche l'√©tat des conteneurs"
	@echo ""
	@echo "$(YELLOW)üìä Base de donn√©es:$(NC)"
	@echo "  make db-push      - Applique le sch√©ma Prisma"
	@echo "  make db-seed      - Charge les donn√©es initiales"
	@echo "  make db-reset     - R√©initialise la DB (ATTENTION: destructif)"
	@echo "  make db-studio    - Lance Prisma Studio (GUI)"
	@echo "  make backup       - Sauvegarde la base de donn√©es"
	@echo "  make restore      - Restaure la base de donn√©es"
	@echo ""
	@echo "$(YELLOW)üìù Logs:$(NC)"
	@echo "  make logs         - Affiche tous les logs"
	@echo "  make logs-web     - Logs de l'application web"
	@echo "  make logs-db      - Logs de PostgreSQL"
	@echo ""
	@echo "$(YELLOW)üß™ D√©veloppement:$(NC)"
	@echo "  make lint         - Lance ESLint"
	@echo "  make typecheck    - V√©rifie les types TypeScript"
	@echo "  make test         - Lance les tests (si disponibles)"
	@echo "  make bash-web     - Shell dans le conteneur web"
	@echo "  make bash-db      - Shell dans le conteneur PostgreSQL"
	@echo ""
	@echo "$(YELLOW)üßπ Nettoyage:$(NC)"
	@echo "  make clean        - Nettoie les ressources Docker inutilis√©es"
	@echo "  make nuke         - R√©initialisation compl√®te (DANGER!)"

# Installation compl√®te
install:
	@echo "$(GREEN)Installation de Matrix Flow...$(NC)"
	@cd $(WEB_DIR) && npm install
	@echo "$(GREEN)G√©n√©ration du client Prisma...$(NC)"
	@cd $(WEB_DIR) && npx prisma generate
	@echo "$(GREEN)Configuration de la base de donn√©es...$(NC)"
	@$(MAKE) db-push
	@$(MAKE) db-seed
	@echo "$(GREEN)‚úÖ Installation termin√©e !$(NC)"
	@echo "Lancez 'make dev' pour d√©marrer en d√©veloppement"

# Mode d√©veloppement (local)
dev:
	@echo "$(GREEN)D√©marrage en mode d√©veloppement...$(NC)"
	@cd $(WEB_DIR) && npm run dev

# Mode production avec Docker
prod:
	@echo "$(GREEN)D√©marrage en mode production...$(NC)"
	@$(COMPOSE_PROD) up -d
	@echo "$(GREEN)‚úÖ Application disponible sur $(APP_URL)$(NC)"

# Construction des images Docker
build:
	@echo "$(YELLOW)Construction des images Docker...$(NC)"
	@$(COMPOSE) build --no-cache

# D√©marrage des services
up:
	@echo "$(GREEN)D√©marrage des services...$(NC)"
	@$(COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s$(NC)"
	@echo "Application disponible sur $(APP_URL)"

# Arr√™t des services
down:
	@echo "$(YELLOW)Arr√™t des services...$(NC)"
	@$(COMPOSE) down

# Red√©marrage des services
restart: down up

# √âtat des conteneurs
ps:
	@$(COMPOSE) ps

# Logs de tous les services
logs:
	@$(COMPOSE) logs -f

# Logs de l'application web
logs-web:
	@$(COMPOSE) logs -f web

# Logs de la base de donn√©es
logs-db:
	@$(COMPOSE) logs -f db

# Base de donn√©es - Appliquer le sch√©ma
db-push:
	@echo "$(YELLOW)Application du sch√©ma Prisma...$(NC)"
	@cd $(WEB_DIR) && npx prisma db push

# Base de donn√©es - Seed
db-seed:
	@echo "$(YELLOW)Chargement des donn√©es initiales...$(NC)"
	@cd $(WEB_DIR) && npm run db:seed
	@echo "$(GREEN)‚úÖ Utilisateur admin cr√©√© (username: admin, password: admin)$(NC)"

# Base de donn√©es - Reset complet
db-reset:
	@echo "$(RED)‚ö†Ô∏è  ATTENTION: Cette commande va supprimer toutes les donn√©es !$(NC)"
	@echo "Appuyez sur Ctrl+C pour annuler, ou Entr√©e pour continuer..."
	@read confirm
	@cd $(WEB_DIR) && npx prisma db push --force-reset
	@$(MAKE) db-seed
	@echo "$(GREEN)‚úÖ Base de donn√©es r√©initialis√©e$(NC)"

# Prisma Studio (GUI pour la DB)
db-studio:
	@echo "$(GREEN)Ouverture de Prisma Studio...$(NC)"
	@cd $(WEB_DIR) && npx prisma studio

# Sauvegarde de la base de donn√©es
backup:
	@echo "$(YELLOW)Sauvegarde de la base de donn√©es...$(NC)"
	@mkdir -p backups
	@$(COMPOSE) exec -T db pg_dump -U postgres matrixflow > backups/backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e dans backups/$(NC)"

# Restauration de la base de donn√©es
restore:
	@echo "$(YELLOW)Fichiers de sauvegarde disponibles:$(NC)"
	@ls -la backups/*.sql 2>/dev/null || echo "Aucune sauvegarde trouv√©e"
	@echo ""
	@echo "Entrez le nom du fichier √† restaurer (ex: backup_20240113_120000.sql):"
	@read filename; \
	if [ -f "backups/$$filename" ]; then \
		echo "$(YELLOW)Restauration de $$filename...$(NC)"; \
		$(COMPOSE) exec -T db psql -U postgres matrixflow < backups/$$filename; \
		echo "$(GREEN)‚úÖ Restauration termin√©e$(NC)"; \
	else \
		echo "$(RED)‚ùå Fichier non trouv√©$(NC)"; \
	fi

# Linting
lint:
	@echo "$(YELLOW)V√©rification du code avec ESLint...$(NC)"
	@cd $(WEB_DIR) && npm run lint

# Type checking
typecheck:
	@echo "$(YELLOW)V√©rification des types TypeScript...$(NC)"
	@cd $(WEB_DIR) && npm run typecheck

# Tests (√† impl√©menter)
test:
	@echo "$(YELLOW)Lancement des tests...$(NC)"
	@cd $(WEB_DIR) && npm test 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Aucun test configur√©$(NC)"

# Shell dans le conteneur web
bash-web:
	@$(COMPOSE) exec web sh

# Shell dans le conteneur PostgreSQL
bash-db:
	@$(COMPOSE) exec db bash

# Nettoyage l√©ger
clean:
	@echo "$(YELLOW)Nettoyage des ressources Docker inutilis√©es...$(NC)"
	@docker image prune -f
	@docker volume prune -f
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

# Nettoyage complet (DANGER!)
nuke:
	@echo "$(RED)‚ö†Ô∏è  DANGER: Cette commande va tout supprimer (conteneurs, volumes, images) !$(NC)"
# 	@echo "Tapez 'CONFIRMER' pour continuer:"
# 	@read confirm; \
# 	if [ "$$confirm" = "CONFIRMER" ]; then \
		echo "$(RED)Suppression en cours...$(NC)"; \
		$(COMPOSE) down -v --rmi all; \
		docker system prune -af --volumes; \
		rm -rf $(WEB_DIR)/node_modules $(WEB_DIR)/.next; \
		echo "$(GREEN)‚úÖ R√©initialisation compl√®te termin√©e$(NC)"; \
# 	else \
# 		echo "$(YELLOW)Annul√©$(NC)"; \
# 	fi
	@echo "$(RED)Suppression en cours...$(NC)"
	$(COMPOSE) down -v --rmi all
	docker system prune -af --volumes
	rm -rf $(WEB_DIR)/node_modules $(WEB_DIR)/.next
	@echo "$(GREEN)‚úÖ R√©initialisation compl√®te termin√©e$(NC)"

# V√©rification de l'√©tat de l'application
health:
	@echo "$(YELLOW)V√©rification de l'√©tat de l'application...$(NC)"
	@curl -fsS $(APP_URL) > /dev/null 2>&1 && \
		echo "$(GREEN)‚úÖ Application accessible sur $(APP_URL)$(NC)" || \
		echo "$(RED)‚ùå Application non accessible$(NC)"
	@$(COMPOSE) exec -T db pg_isready -U postgres > /dev/null 2>&1 && \
		echo "$(GREEN)‚úÖ Base de donn√©es op√©rationnelle$(NC)" || \
		echo "$(RED)‚ùå Base de donn√©es non accessible$(NC)"

# Affichage des variables d'environnement (sans les secrets)
env:
	@echo "$(YELLOW)Variables d'environnement configur√©es:$(NC)"
	@echo "DATABASE_URL: [CONFIGUR√â]" 
	@echo "NEXTAUTH_URL: $(APP_URL)"
	@echo "NODE_ENV: $${NODE_ENV:-development}"
	@test -f $(WEB_DIR)/.env.local && echo "$(GREEN)‚úÖ .env.local pr√©sent$(NC)" || echo "$(YELLOW)‚ö†Ô∏è  .env.local manquant$(NC)"
	@test -f .env && echo "$(GREEN)‚úÖ .env pr√©sent$(NC)" || echo "$(YELLOW)‚ö†Ô∏è  .env manquant$(NC)"

# G√©n√©ration du package-lock.json
lock:
	@echo "$(YELLOW)G√©n√©ration du package-lock.json...$(NC)"
	@docker run --rm -v "$$(pwd)/$(WEB_DIR)":/app -w /app node:22-alpine \
		sh -c 'npm install --package-lock-only --no-audit --no-fund'
	@echo "$(GREEN)‚úÖ package-lock.json g√©n√©r√©$(NC)"

# Mise √† jour des d√©pendances
update:
	@echo "$(YELLOW)Mise √† jour des d√©pendances...$(NC)"
	@cd $(WEB_DIR) && npm update
	@echo "$(GREEN)‚úÖ D√©pendances mises √† jour$(NC)"

# Commande par d√©faut
.DEFAULT_GOAL := help
