// web/prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum GlobalRole { 
  admin 
  user 
  viewer 
}

enum MatrixRole { 
  owner 
  editor 
  viewer 
}

enum VersionStatus { 
  draft 
  in_review 
  approved 
  rejected 
}

enum AuditAction {
  create
  update
  delete
}

enum ChangeRequestType {
  create_entry
  update_entry
  delete_entry
}

enum ChangeRequestStatus {
  pending
  approved
  rejected
}

model User {
  id                    Int        @id @default(autoincrement())
  email                 String?    @unique
  username              String     @unique
  fullName              String?
  passwordHash          String
  role                  GlobalRole @default(viewer)
  language              String     @default("fr")
  isActive              Boolean    @default(true)
  createdAt             DateTime   @default(now())
  lastPasswordChange    DateTime   @default(now())
  emailVerified         DateTime?
  
  // 2FA fields
  twoFactorEnabled      Boolean    @default(false)
  twoFactorSecret       String?
  backupCodes           String?    // JSON array of backup codes
  
  // Session management
  maxConcurrentSessions Int        @default(5)
  sessionTimeoutMinutes Int        @default(720) // 12 hours default
  lastActiveAt          DateTime?
  
  // Relations
  ownedMatrices         Matrix[]
  matrixPermissions     MatrixPermission[]
  createdVersions       MatrixVersion[] @relation("CreatedBy")
  approvedVersions      MatrixVersion[] @relation("ApprovedBy") 
  versionApprovals      MatrixVersionApproval[]
  auditLogs             AuditLog[]
  requestedChanges      ChangeRequest[]       @relation("RequestedBy")
  reviewedChanges       ChangeRequest[]       @relation("ReviewedBy")
  userSessions          UserSession[]
  systemLogs            SystemLog[]
  groupMemberships      UserGroupMember[]
  accounts              Account[]
  sessions              Session[]
  sentEmails            EmailLog[]

  @@index([isActive, role])
  @@index([createdAt(sort: Desc)])
  @@index([lastActiveAt(sort: Desc)])
  @@map("users")
}

model UserSession {
  id            String   @id @default(cuid())
  userId        Int
  sessionToken  String   @unique
  ipAddress     String?
  userAgent     String?
  deviceInfo    String?  // JSON with device details
  createdAt     DateTime @default(now())
  lastActiveAt  DateTime @default(now())
  expiresAt     DateTime
  isActive      Boolean  @default(true)
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isActive])
  @@index([sessionToken])
  @@index([expiresAt])
  @@index([lastActiveAt(sort: Desc)])
  @@map("user_sessions")
}

model Matrix {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  ownerId             Int?
  publishedVersionId  Int?                @unique
  requiredApprovals   Int                 @default(1)
  webhookUrl          String?
  
  // Relations
  owner               User?               @relation(fields: [ownerId], references: [id])
  publishedVersion    MatrixVersion?      @relation("PublishedVersion", fields: [publishedVersionId], references: [id])
  entries             FlowEntry[]
  permissions         MatrixPermission[]
  versions            MatrixVersion[]     @relation("MatrixVersions")
  changeRequests      ChangeRequest[]

  @@index([updatedAt(sort: Desc)])
  @@index([ownerId, updatedAt(sort: Desc)])
  @@map("matrices")
}

model FlowEntry {
  id                Int      @id @default(autoincrement())
  matrixId          Int
  request_type      String?
  rule_status       String?
  rule_name         String?
  device            String?
  src_zone          String?
  src_name          String?
  src_cidr          String?
  src_service       String?
  dst_zone          String?
  dst_name          String?
  dst_cidr          String?
  protocol_group    String?
  dst_service       String?
  action            String?
  implementation_date DateTime?
  requester         String?
  comment           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  matrix            Matrix          @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  changeRequests    ChangeRequest[]

  @@index([matrixId, createdAt(sort: Desc)])
  @@index([matrixId, rule_name])
  @@index([matrixId, updatedAt(sort: Desc)])
  @@map("flow_entries")
}

model MatrixPermission {
  id       Int        @id @default(autoincrement())
  matrixId Int
  userId   Int
  role     MatrixRole @default(viewer)
  
  // Relations
  matrix   Matrix     @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([matrixId, userId], name: "uq_matrix_user")
  @@map("matrix_permissions")
}

model MatrixVersion {
  id                 Int             @id @default(autoincrement())
  matrixId           Int
  version            Int
  status             VersionStatus   @default(draft)
  note               String?
  snapshot           Json
  createdById        Int?
  createdAt          DateTime        @default(now())
  approvedById       Int?
  approvedAt         DateTime?
  requiredApprovals  Int             @default(1)
  
  // Relations
  matrix             Matrix          @relation("MatrixVersions", fields: [matrixId], references: [id], onDelete: Cascade)
  createdBy          User?           @relation("CreatedBy", fields: [createdById], references: [id])
  approvedBy         User?           @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvals          MatrixVersionApproval[]
  publishedMatrix    Matrix?         @relation("PublishedVersion")

  @@unique([matrixId, version])
  @@index([matrixId, version(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@index([approvedAt(sort: Desc)])
  @@map("matrix_versions")
}

model MatrixVersionApproval {
  id        Int      @id @default(autoincrement())
  versionId Int
  userId    Int
  createdAt DateTime @default(now())
  
  // Relations
  version   MatrixVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([versionId, userId], name: "uq_version_user")
  @@map("matrix_version_approvals")
}

model AuditLog {
  id        Int        @id @default(autoincrement())
  userId    Int?
  matrixId  Int?
  entity    String
  entityId  Int
  action    AuditAction
  changes   Json
  ip        String?
  userAgent String?
  at        DateTime   @default(now())
  
  // Relations
  user      User?      @relation(fields: [userId], references: [id])

  @@index([at(sort: Desc)])
  @@index([entity, at(sort: Desc)])
  @@index([action, at(sort: Desc)])
  @@index([userId, at(sort: Desc)])
  @@index([matrixId, at(sort: Desc)])
  @@index([entity, action, at(sort: Desc)])
  @@map("audit_logs")
}

model ChangeRequest {
  id              Int                   @id @default(autoincrement())
  matrixId        Int
  entryId         Int?                  // Pour les modifications/suppressions
  requestType     ChangeRequestType
  status          ChangeRequestStatus   @default(pending)
  description     String
  requestedData   Json                  // Donn√©es de la demande (nouveau flux, modifications, etc.)
  requestedById   Int
  requestedAt     DateTime              @default(now())
  reviewedById    Int?
  reviewedAt      DateTime?
  reviewComment   String?
  
  // Relations
  matrix          Matrix                @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  entry           FlowEntry?            @relation(fields: [entryId], references: [id], onDelete: Cascade)
  requestedBy     User                  @relation("RequestedBy", fields: [requestedById], references: [id])
  reviewedBy      User?                 @relation("ReviewedBy", fields: [reviewedById], references: [id])

  @@index([status, requestedAt(sort: Desc)])
  @@index([matrixId, status, requestedAt(sort: Desc)])
  @@index([requestedById, status, requestedAt(sort: Desc)])
  @@index([matrixId, entryId, requestType, status, requestedById])
  @@map("change_requests")
}

// NextAuth tables
model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Tables pour le panneau d'administration

model SystemSetting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  category  String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@map("system_settings")
}

model UserGroup {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  permissions Json     @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  members     UserGroupMember[]

  @@index([isActive])
  @@map("user_groups")
}

model UserGroupMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  createdAt DateTime @default(now())
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_group_members")
}

model AuthProvider {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  type        String   // 'ldap', 'oidc', 'saml'
  config      Json
  isActive    Boolean  @default(false)
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, priority])
  @@index([type])
  @@map("auth_providers")
}

model EmailTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  subject     String
  htmlContent String   @db.Text
  textContent String?  @db.Text
  variables   Json     @default("[]")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("email_templates")
}

// Tables pour Phase 3 - S√©curit√© & Monitoring

model SystemLog {
  id           String    @id @default(cuid())
  level        String    // 'debug', 'info', 'warn', 'error', 'fatal'
  category     String    // 'security', 'auth', 'api', 'database', 'system'
  message      String
  timestamp    DateTime  @default(now())
  userId       Int?
  ipAddress    String?
  userAgent    String?
  requestId    String?
  sessionId    String?
  metadata     String?   @db.Text // JSON serialized
  errorName    String?
  errorMessage String?
  errorStack   String?   @db.Text
  
  // Relations
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([timestamp(sort: Desc)])
  @@index([level, timestamp(sort: Desc)])
  @@index([category, timestamp(sort: Desc)])
  @@index([userId, timestamp(sort: Desc)])
  @@index([level, category, timestamp(sort: Desc)])
  @@map("system_logs")
}

model EmailLog {
  id           Int      @id @default(autoincrement())
  recipient    String
  subject      String
  templateType String
  status       String   // 'sent', 'failed', 'pending'
  sentBy       Int?
  metadata     String?  @db.Text // JSON with template data
  error        String?
  createdAt    DateTime @default(now())
  sentAt       DateTime?

  // Relations
  sender       User?    @relation(fields: [sentBy], references: [id], onDelete: SetNull)

  @@index([createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@index([templateType, createdAt(sort: Desc)])
  @@index([recipient, createdAt(sort: Desc)])
  @@map("email_logs")
}

