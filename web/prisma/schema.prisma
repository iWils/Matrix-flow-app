datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum GlobalRole { admin user viewer }
enum MatrixRole { owner editor viewer }
enum VersionStatus { draft in_review approved rejected }
enum AuditAction { create update delete }

model User {
  id           Int        @id @default(autoincrement())
  email        String?    @unique
  username     String     @unique
  fullName     String?
  passwordHash String
  role         GlobalRole @default(viewer)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  emailVerified DateTime?
  matrices     Matrix[]
}

model Matrix {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  ownerId             Int?
  owner               User?               @relation(fields: [ownerId], references: [id])
  publishedVersionId  Int?
  publishedVersion    MatrixVersion?      @relation("PublishedVersion", fields: [publishedVersionId], references: [id])
  entries             FlowEntry[]
  permissions         MatrixPermission[]
  requiredApprovals   Int                 @default(1)
  webhookUrl          String?
  versions            MatrixVersion[]
}

model FlowEntry {
  id                Int      @id @default(autoincrement())
  matrixId          Int
  matrix            Matrix   @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  request_type      String?
  rule_status       String?
  rule_name         String?
  device            String?
  src_zone          String?
  src_name          String?
  src_cidr          String?
  src_service       String?
  dst_zone          String?
  dst_name          String?
  dst_cidr          String?
  protocol_group    String?
  dst_service       String?
  action            String?
  implementation_date DateTime?
  requester         String?
  comment           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model MatrixPermission {
  id       Int        @id @default(autoincrement())
  matrixId Int
  userId   Int
  role     MatrixRole @default(viewer)
  matrix   Matrix     @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([matrixId, userId], name: "uq_matrix_user")
}

model MatrixVersion {
  id                 Int             @id @default(autoincrement())
  matrixId           Int
  matrix             Matrix          @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  version            Int
  status             VersionStatus   @default(draft)
  note               String?
  snapshot           Json
  createdById        Int?
  createdAt          DateTime        @default(now())
  approvedById       Int?
  approvedAt         DateTime?
  requiredApprovals  Int             @default(1)
  approvals          MatrixVersionApproval[]
}

model MatrixVersionApproval {
  id        Int      @id @default(autoincrement())
  versionId Int
  userId    Int
  createdAt DateTime @default(now())
  version   MatrixVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([versionId, userId], name: "uq_version_user")
}

model AuditLog {
  id        Int        @id @default(autoincrement())
  userId    Int?
  matrixId  Int?
  entity    String
  entityId  Int
  action    AuditAction
  changes   Json
  at        DateTime   @default(now())
}

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
